{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RICARDO\\\\Downloads\\\\proyecto-quive\\\\frontend\\\\quive-web\\\\src\\\\pages\\\\utils\\\\DriveImageViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n/**\r\n * DriveImageDownloader:\r\n * - Recibe un fileId de Google Drive.\r\n * - Hace fetch del blob en memoria.\r\n * - Crea un object URL para mostrarlo en un <img>.\r\n * - Cuando cambia el fileId o el componente se desmonta, revoca el object URL\r\n *   para liberar memoria.\r\n *\r\n * Props:\r\n *   - fileId: string (ID de Drive, ej. \"1kutfwXD_y91L31sxmlm4E5f4MTULbJ95\")\r\n *   - altText (opcional): texto alt para la imagen\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DriveImageDownloader = ({\n  fileId,\n  altText = 'Imagen de Drive'\n}) => {\n  _s();\n  const [objectUrl, setObjectUrl] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n  useEffect(() => {\n    if (!fileId) {\n      setObjectUrl(null);\n      setLoading(false);\n      return;\n    }\n    let isCanceled = false;\n    let currentObjectUrl = null;\n    const fetchBlob = async () => {\n      setLoading(true);\n      setErrorMsg(null);\n      try {\n        // URL directa que funciona para descargar el archivo:\n        const driveUrl = `https://drive.usercontent.google.com/download?id=${fileId}&export=view`;\n\n        // Hacemos fetch al blob\n        const resp = await fetch(driveUrl);\n        if (!resp.ok) {\n          throw new Error(`HTTP ${resp.status} - ${resp.statusText}`);\n        }\n        const blob = await resp.blob();\n        // Creamos un object URL en memoria para que <img> lo use\n        currentObjectUrl = URL.createObjectURL(blob);\n        if (!isCanceled) {\n          setObjectUrl(currentObjectUrl);\n        } else {\n          // Si ya fue cancelado antes de asignar, lo revocamos inmediatamente\n          URL.revokeObjectURL(currentObjectUrl);\n        }\n      } catch (err) {\n        console.error('Error descargando la imagen de Drive:', err);\n        if (!isCanceled) {\n          setErrorMsg('No fue posible cargar la imagen.');\n        }\n      } finally {\n        if (!isCanceled) {\n          setLoading(false);\n        }\n      }\n    };\n    fetchBlob();\n\n    // Cleanup: cuando cambie fileId o el componente se desmonte, revocamos\n    return () => {\n      isCanceled = true;\n      if (currentObjectUrl) {\n        URL.revokeObjectURL(currentObjectUrl);\n      }\n    };\n  }, [fileId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500\",\n      children: \"Cargando imagen...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  if (errorMsg) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n  if (!objectUrl) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500\",\n      children: \"No hay imagen para mostrar.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: objectUrl,\n    alt: altText,\n    className: \"max-w-full h-auto rounded-lg shadow-md\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(DriveImageDownloader, \"jySijk8gWG4uwOiO3wWCAldjOp4=\");\n_c = DriveImageDownloader;\nexport default DriveImageDownloader;\nvar _c;\n$RefreshReg$(_c, \"DriveImageDownloader\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DriveImageDownloader","fileId","altText","_s","objectUrl","setObjectUrl","loading","setLoading","errorMsg","setErrorMsg","isCanceled","currentObjectUrl","fetchBlob","driveUrl","resp","fetch","ok","Error","status","statusText","blob","URL","createObjectURL","revokeObjectURL","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/RICARDO/Downloads/proyecto-quive/frontend/quive-web/src/pages/utils/DriveImageViewer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n/**\r\n * DriveImageDownloader:\r\n * - Recibe un fileId de Google Drive.\r\n * - Hace fetch del blob en memoria.\r\n * - Crea un object URL para mostrarlo en un <img>.\r\n * - Cuando cambia el fileId o el componente se desmonta, revoca el object URL\r\n *   para liberar memoria.\r\n *\r\n * Props:\r\n *   - fileId: string (ID de Drive, ej. \"1kutfwXD_y91L31sxmlm4E5f4MTULbJ95\")\r\n *   - altText (opcional): texto alt para la imagen\r\n */\r\nconst DriveImageDownloader = ({ fileId, altText = 'Imagen de Drive' }) => {\r\n  const [objectUrl, setObjectUrl] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!fileId) {\r\n      setObjectUrl(null);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    let isCanceled = false;\r\n    let currentObjectUrl = null;\r\n\r\n    const fetchBlob = async () => {\r\n      setLoading(true);\r\n      setErrorMsg(null);\r\n\r\n      try {\r\n        // URL directa que funciona para descargar el archivo:\r\n        const driveUrl = `https://drive.usercontent.google.com/download?id=${fileId}&export=view`;\r\n\r\n        // Hacemos fetch al blob\r\n        const resp = await fetch(driveUrl);\r\n        if (!resp.ok) {\r\n          throw new Error(`HTTP ${resp.status} - ${resp.statusText}`);\r\n        }\r\n\r\n        const blob = await resp.blob();\r\n        // Creamos un object URL en memoria para que <img> lo use\r\n        currentObjectUrl = URL.createObjectURL(blob);\r\n\r\n        if (!isCanceled) {\r\n          setObjectUrl(currentObjectUrl);\r\n        } else {\r\n          // Si ya fue cancelado antes de asignar, lo revocamos inmediatamente\r\n          URL.revokeObjectURL(currentObjectUrl);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error descargando la imagen de Drive:', err);\r\n        if (!isCanceled) {\r\n          setErrorMsg('No fue posible cargar la imagen.');\r\n        }\r\n      } finally {\r\n        if (!isCanceled) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchBlob();\r\n\r\n    // Cleanup: cuando cambie fileId o el componente se desmonte, revocamos\r\n    return () => {\r\n      isCanceled = true;\r\n      if (currentObjectUrl) {\r\n        URL.revokeObjectURL(currentObjectUrl);\r\n      }\r\n    };\r\n  }, [fileId]);\r\n\r\n  if (loading) {\r\n    return <p className=\"text-gray-500\">Cargando imagen...</p>;\r\n  }\r\n\r\n  if (errorMsg) {\r\n    return <p className=\"text-red-500\">{errorMsg}</p>;\r\n  }\r\n\r\n  if (!objectUrl) {\r\n    return <p className=\"text-gray-500\">No hay imagen para mostrar.</p>;\r\n  }\r\n\r\n  return (\r\n    <img\r\n      src={objectUrl}\r\n      alt={altText}\r\n      className=\"max-w-full h-auto rounded-lg shadow-md\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default DriveImageDownloader;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
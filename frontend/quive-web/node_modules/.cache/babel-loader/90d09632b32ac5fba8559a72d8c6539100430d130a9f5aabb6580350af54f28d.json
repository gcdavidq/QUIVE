{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nconst useUbicacionDesdeExcel = () => {\n  _s();\n  const [datosUbicacion, setDatosUbicacion] = useState(null);\n  useEffect(() => {\n    const fetchExcel = async () => {\n      const response = await fetch(\"/distritos.xlsx\");\n      const data = await response.arrayBuffer();\n      const workbook = XLSX.read(data, {\n        type: \"array\"\n      });\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\n      const rows = XLSX.utils.sheet_to_json(sheet);\n      const ubicacion = {};\n      rows.forEach(row => {\n        var _row$departamento, _row$provincia, _row$distrito;\n        const departamento = (_row$departamento = row[\"departamento\"]) === null || _row$departamento === void 0 ? void 0 : _row$departamento.trim();\n        const provincia = (_row$provincia = row[\"provincia\"]) === null || _row$provincia === void 0 ? void 0 : _row$provincia.trim();\n        const distrito = (_row$distrito = row[\"distrito\"]) === null || _row$distrito === void 0 ? void 0 : _row$distrito.trim();\n        if (departamento && provincia && distrito) {\n          if (!ubicacion[departamento]) ubicacion[departamento] = {};\n          if (!ubicacion[departamento][provincia]) ubicacion[departamento][provincia] = [];\n          if (!ubicacion[departamento][provincia].includes(distrito)) {\n            ubicacion[departamento][provincia].push(distrito);\n          }\n        }\n      });\n      setDatosUbicacion(ubicacion);\n    };\n    fetchExcel();\n  }, []);\n  return datosUbicacion;\n};\n_s(useUbicacionDesdeExcel, \"B+km5sYbiSkwm709l1CPmyUelgg=\");\nexport default useUbicacionDesdeExcel;","map":{"version":3,"names":["React","useEffect","useState","XLSX","useUbicacionDesdeExcel","_s","datosUbicacion","setDatosUbicacion","fetchExcel","response","fetch","data","arrayBuffer","workbook","read","type","sheet","Sheets","SheetNames","rows","utils","sheet_to_json","ubicacion","forEach","row","_row$departamento","_row$provincia","_row$distrito","departamento","trim","provincia","distrito","includes","push"],"sources":["C:/Users/RICARDO/Downloads/proyecto-quive/frontend/quive-web/src/pages/Registerutils/distrito.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst useUbicacionDesdeExcel = () => {\r\n  const [datosUbicacion, setDatosUbicacion] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchExcel = async () => {\r\n      const response = await fetch(\"/distritos.xlsx\");\r\n      const data = await response.arrayBuffer();\r\n      const workbook = XLSX.read(data, { type: \"array\" });\r\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n      const rows = XLSX.utils.sheet_to_json(sheet);\r\n\r\n      const ubicacion = {};\r\n\r\n      rows.forEach((row) => {\r\n        const departamento = row[\"departamento\"]?.trim();\r\n        const provincia = row[\"provincia\"]?.trim();\r\n        const distrito = row[\"distrito\"]?.trim();\r\n\r\n        if (departamento && provincia && distrito) {\r\n          if (!ubicacion[departamento]) ubicacion[departamento] = {};\r\n          if (!ubicacion[departamento][provincia]) ubicacion[departamento][provincia] = [];\r\n\r\n          if (!ubicacion[departamento][provincia].includes(distrito)) {\r\n            ubicacion[departamento][provincia].push(distrito);\r\n          }\r\n        }\r\n      });\r\n\r\n      setDatosUbicacion(ubicacion);\r\n    };\r\n\r\n    fetchExcel();\r\n  }, []);\r\n\r\n  return datosUbicacion;\r\n};\r\n\r\nexport default useUbicacionDesdeExcel;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,KAAKC,IAAI,MAAM,MAAM;AAE5B,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAE1DD,SAAS,CAAC,MAAM;IACd,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;MAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,WAAW,CAAC,CAAC;MACzC,MAAMC,QAAQ,GAAGV,IAAI,CAACW,IAAI,CAACH,IAAI,EAAE;QAAEI,IAAI,EAAE;MAAQ,CAAC,CAAC;MACnD,MAAMC,KAAK,GAAGH,QAAQ,CAACI,MAAM,CAACJ,QAAQ,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;MACrD,MAAMC,IAAI,GAAGhB,IAAI,CAACiB,KAAK,CAACC,aAAa,CAACL,KAAK,CAAC;MAE5C,MAAMM,SAAS,GAAG,CAAC,CAAC;MAEpBH,IAAI,CAACI,OAAO,CAAEC,GAAG,IAAK;QAAA,IAAAC,iBAAA,EAAAC,cAAA,EAAAC,aAAA;QACpB,MAAMC,YAAY,IAAAH,iBAAA,GAAGD,GAAG,CAAC,cAAc,CAAC,cAAAC,iBAAA,uBAAnBA,iBAAA,CAAqBI,IAAI,CAAC,CAAC;QAChD,MAAMC,SAAS,IAAAJ,cAAA,GAAGF,GAAG,CAAC,WAAW,CAAC,cAAAE,cAAA,uBAAhBA,cAAA,CAAkBG,IAAI,CAAC,CAAC;QAC1C,MAAME,QAAQ,IAAAJ,aAAA,GAAGH,GAAG,CAAC,UAAU,CAAC,cAAAG,aAAA,uBAAfA,aAAA,CAAiBE,IAAI,CAAC,CAAC;QAExC,IAAID,YAAY,IAAIE,SAAS,IAAIC,QAAQ,EAAE;UACzC,IAAI,CAACT,SAAS,CAACM,YAAY,CAAC,EAAEN,SAAS,CAACM,YAAY,CAAC,GAAG,CAAC,CAAC;UAC1D,IAAI,CAACN,SAAS,CAACM,YAAY,CAAC,CAACE,SAAS,CAAC,EAAER,SAAS,CAACM,YAAY,CAAC,CAACE,SAAS,CAAC,GAAG,EAAE;UAEhF,IAAI,CAACR,SAAS,CAACM,YAAY,CAAC,CAACE,SAAS,CAAC,CAACE,QAAQ,CAACD,QAAQ,CAAC,EAAE;YAC1DT,SAAS,CAACM,YAAY,CAAC,CAACE,SAAS,CAAC,CAACG,IAAI,CAACF,QAAQ,CAAC;UACnD;QACF;MACF,CAAC,CAAC;MAEFxB,iBAAiB,CAACe,SAAS,CAAC;IAC9B,CAAC;IAEDd,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,cAAc;AACvB,CAAC;AAACD,EAAA,CAnCID,sBAAsB;AAqC5B,eAAeA,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}